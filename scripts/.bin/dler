#!/usr/bin/env python

from dataclasses import dataclass
from shutil import get_terminal_size
from argparse import ArgumentParser, SUPPRESS
from time import sleep
import os
import sys
import urllib.request
import json
import urllib

def get_yt_title(url):
    # https://www.youtube.com/watch?v=zm-SmoEdrbo
    temp = url.split('?')
    video_id = temp[1].replace('v=', '')

    params = {"format": "json", "url": "https://www.youtube.com/watch?v=%s" % video_id}
    url = "https://www.youtube.com/oembed"
    query_string = urllib.parse.urlencode(params)
    url = url + "?" + query_string

    with urllib.request.urlopen(url) as response:
        response_text = response.read()
        data = json.loads(response_text.decode())
        return(data['title'])


class MyParser(ArgumentParser):
    def error(self, message):
        #sys.stderr.write('error: %s\n' % message)
        title()
        print()
        self.print_help()
        print()
        sys.exit(2)


class Colors:
    reset = "\033[0m"

    fgRed = "\033[31;1m"
    fgGreen = "\033[32;1m"
    fgYellow = "\033[33;1m"
    fgBlue = "\033[34;1m"
    fgCyan = "\033[36;1m"

@dataclass
class Constants:
    prompt = "❯"
    line = "─"
    dl_type = 'video'
    dl_subs = False

def title():
    os.system('clear')
    title = " DLER "
    col = Colors.fgYellow
    res = Colors.reset
    width = get_terminal_size().columns
    half = int((width - len(title)) / 2) * Constants.line
    print(f"{col}{half}{title}{half}{res}")


def warning(text):
    prompt = 2 * Constants.prompt
    print(f"{Colors.fgRed}{prompt}{Colors.reset} {text}")


def info(text):
    prompt = 2 * Constants.prompt
    print(f"{Colors.fgGreen}{prompt}{Colors.reset} {text}")


def message(text):
    prompt = Constants.prompt
    print(f"{Colors.fgYellow}{prompt}{Colors.reset} {text}")


def readfile(filename):
    filename = os.path.join(os.getcwd(), filename)
    with open(filename, 'r') as text_file:
        data = text_file.read().splitlines()
    return data


def process_list(filenames):
    for filename in filenames:
        try:
            data = readfile(filename)
        except:
            warning(f"File '{filename}' does not exist.")
            sys.exit(1)
        do_download(data, filename)


def do_download(data, filename):
    yel = Colors.fgYellow
    res = Colors.reset

    clean_cmd = 'yt-dlp --download-archive done.txt '

    if Constants.dl_type == 'audio':
        clean_cmd += '-x '

    if Constants.dl_subs:
        clean_cmd += '--sub-lang en '
        clean_cmd += '--sub-format vtt '
        clean_cmd += '--write-sub '

    total = len(data)
    for count, url in enumerate(data):
        os.system('clear')
        title()
        message(f"Parsing file: {yel}{filename}{res}")
        if Constants.dl_type == 'audio':
            message(f"Downloading files as {yel}audio{res}.")
            print()
        else:
            message(f"Downloading files as {yel}video{res}.")
            print()

        cmd = clean_cmd + url
        cnt = count + 1
        info(f"Downloading {cnt} of {total}:")

        video_title = url
        if 'youtube.com' in url:
            video_title = get_yt_title(url)

        info(f"{video_title}")
        print()
        os.system(cmd)
        print()
        sleep(1)


def main(arguments=''):
    #parser = ArgumentParser(add_help=False)
    parser = MyParser(add_help=False)

    required = parser.add_argument_group('required arguments')
    optional = parser.add_argument_group('optional arguments')

    optional.add_argument('-h', '--help',
            action='help',
            default=SUPPRESS,
            help='show this help message and exit.')

    optional.add_argument('-a', '--audio',
            help='Download as audio.',
            action='store_true')

    optional.add_argument('-s', '--subs',
            help='Download subtitles (en, vtt).',
            action='store_true')

    required.add_argument('-i', '--input',
            help='Lists of urls to download.',
            action='extend',
            nargs='+',
            required=True)

    args = parser.parse_args()

    if args.audio:
        Constants.dl_type = 'audio'
    else:
        Constants.dl_type = 'video'

    if args.subs:
        Constants.dl_subs = True

    process_list(args.input)
    donetext = os.path.join(os.getcwd(), 'done.txt')
    if os.path.exists(donetext):
        os.remove(donetext)

    os.system('clear')
    title()
    message("All done.")

if __name__ == "__main__":
    main()
